apiVersion: admissionregistration.k8s.io/v1
kind: ValidatingWebhookConfiguration
metadata:
  name: test-webhook-cfg
webhooks:
  - name: test-webhook
    clientConfig:
      service:
        name: test-webhook
        namespace: ${NS}
        path: "/validate"
      caBundle: ${WEBHOOK_CA_BUNDLE}
    rules:
      - operations: [ "CREATE", "UPDATE"]
        apiGroups: ["*"]
        apiVersions: ["*"]
        resources: ["pods", "deployments", "replicasets", "daemonsets", "jobs", "cronjobs", "ingresses","statefulsets"]
    failurePolicy: Fail
    namespaceSelector:
      matchLabels:
        webhook: enabled
---

apiVersion: v1
kind: Secret
metadata:
  name: test-webhook-secret
  namespace: ${NS}
data:
  tls_private_key: ${WEBHOOK_TLS_PRIVATE_KEY_B64}
---        

apiVersion: v1
kind: ConfigMap
metadata:
  name: test-webhook-cm
  namespace: ${NS}
data:
  tls_cert: |
${WEBHOOK_TLS_CERT}
  something: very-useful

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: test-webhook-app
  namespace: ${NS}
spec:
  replicas: 1
  selector:
    matchLabels:
      app: test-webhook-app
  template:
    metadata:
      labels:
        app: test-webhook-app
    spec:
      containers:
        - name: test-webhook-app
          image: ${WEBHOOK_IMAGE}
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: ${CONTAINER_PORT}
          env:
            - name: CPU_LIMIT
              value: "2"
            - name: CHECK_NAMESPACE
              value: "true"
          volumeMounts:
            - name: ssl-certs
              mountPath: "/data/ssl_certs"
              readOnly: true
            - name: ssl-keys
              mountPath: "/data/ssl_keys"
              readOnly: true
      volumes:
        - name: ssl-certs
          configMap:
            name: test-webhook-cm
            items:
              - key: tls_cert
                path: server-cert.pem
        - name: ssl-keys
          secret:
            secretName: test-webhook-secret
            items:
              - key: tls_private_key
                path: server-key.pem
---
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: test-webhook
rules:
  - apiGroups: ["extensions"]
    resources: ["ingresses"]
    verbs: ["get", "list"]

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: test-webhook-binding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: test-webhook
subjects:
  - kind: ServiceAccount
    name: ${NS}
    namespace: default                